import java.util.*;
import java.io.*;
class Main {
    public static void main(String[] args) {
        BankingSystem bankingSystem = new BankingSystem();
        bankingSystem.run();
    }
}
class User {
    private String username;
    private String passwordHash;
    private List<Account> accounts;
    public User(String username, String passwordHash) {
        this.username = username;
        this.passwordHash = passwordHash;
        this.accounts = new ArrayList<>();
    }
    public String getUsername() {
        return username;
    }
    public String getPasswordHash() {
        return passwordHash;
    }
    public List<Account> getAccounts() {
        return accounts;
    }
    public void addAccount(Account account) {
        accounts.add(account);
    }
}
class Account {
    private String accountNumber;
    private double balance;
    private List<Transaction> transactions;

    public Account(String accountNumber) {
        this.accountNumber = accountNumber;
        this.balance = 0.0;
        this.transactions = new ArrayList<>();
    }
    public String getAccountNumber() {
        return accountNumber;
    }
    public double getBalance() {
        return balance;
    }
    public List<Transaction> getTransactions() {
        return transactions;
    }
    public void deposit(double amount) {
        balance += amount;
        transactions.add(new Transaction("DEPOSIT", amount));
    }
    public boolean withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            transactions.add(new Transaction("WITHDRAW", amount));
            return true;
        }
        return false;
    }
    public void transferTo(Account toAccount, double amount) {
        if (withdraw(amount)) {
            toAccount.deposit(amount);
            transactions.add(new Transaction("TRANSFER", amount));
            toAccount.getTransactions().add(new Transaction("RECEIVE", amount));
        }
    }
}
class Transaction {
    private String type;
    private double amount;
    private long timestamp;
    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
        this.timestamp = System.currentTimeMillis();
    }
    public String getType() {
        return type;
    }
    public double getAmount() {
        return amount;
    }
    public long getTimestamp() {
        return timestamp;
    }
}
class BankingSystem {
    private Map<String, User> users;
    private User currentUser;

    public BankingSystem() {
        users = new HashMap<>();
        loadUsers(); 
    }
    public void run() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Register\n2. Login\n3. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine(); 
            switch (choice) {
                case 1:
                    register(scanner);
                    break;
                case 2:
                    login(scanner);
                    break;
                case 3:
                    saveUsers(); 
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
    private void register(Scanner scanner) {
        System.out.print("Username: ");
        String username = scanner.nextLine();
        System.out.print("Password: ");
        String password = scanner.nextLine();
        String passwordHash = hashPassword(password);
        User user = new User(username, passwordHash);
        users.put(username, user);
        System.out.println("User registered successfully.");
    }
    private void login(Scanner scanner) {
        System.out.print("Username: ");
        String username = scanner.nextLine();
        System.out.print("Password: ");
        String password = scanner.nextLine();
        String passwordHash = hashPassword(password);

        User user = users.get(username);
        if (user != null && user.getPasswordHash().equals(passwordHash)) {
            currentUser = user;
            System.out.println("Login successful.");
            userMenu(scanner);
        } else {
            System.out.println("Invalid username or password.");
        }
    }
    private void userMenu(Scanner scanner) {
        while (true) {
            System.out.println("1. Create Account\n2. View Accounts\n3. Transfer Funds\n4. Logout");
            int choice = scanner.nextInt();
            scanner.nextLine(); 
            switch (choice) {
                case 1:
                    createAccount(scanner);
                    break;
                case 2:
                    viewAccounts();
                    break;
                case 3:
                    transferFunds(scanner);
                    break;
                case 4:
                    currentUser = null;
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
    private void createAccount(Scanner scanner) {
        System.out.print("Enter account number: ");
        String accountNumber = scanner.nextLine();
        Account account = new Account(accountNumber);
        currentUser.addAccount(account);
        System.out.println("Account created successfully.");
    }
    private void viewAccounts() {
        for (Account account : currentUser.getAccounts()) {
            System.out.println("Account Number: " + account.getAccountNumber());
            System.out.println("Balance: " + account.getBalance());
            for (Transaction transaction : account.getTransactions()) {
                System.out.println("  " + transaction.getType() + ": " + transaction.getAmount() + " at " + new Date(transaction.getTimestamp()));
            }
        }
    }
    private void transferFunds(Scanner scanner) {
        System.out.print("From account number: ");
        String fromAccountNumber = scanner.nextLine();
        System.out.print("To account number: ");
        String toAccountNumber = scanner.nextLine();
        System.out.print("Amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); 
        Account fromAccount = null;
        for (Account account : currentUser.getAccounts()) {
            if (account.getAccountNumber().equals(fromAccountNumber)) {
                fromAccount = account;
                break;
            }
        }
        if (fromAccount == null) {
            System.out.println("Invalid from account number.");
            return;
        }
        User toUser = null;
        Account toAccount = null;
        for (User user : users.values()) {
            for (Account account : user.getAccounts()) {
                if (account.getAccountNumber().equals(toAccountNumber)) {
                    toUser = user;
                    toAccount = account;
                    break;
                }
            }
        }
        if (toAccount == null) {
            System.out.println("Invalid to account number.");
            return;
        }
        fromAccount.transferTo(toAccount, amount);
        System.out.println("Transfer successful.");
    }
    private String hashPassword(String password) {
        return Integer.toString(password.hashCode());
    }
    private void loadUsers() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("users.dat"))) {
            users = (Map<String, User>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
        }
    }
    private void saveUsers() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("users.dat"))) {
            oos.writeObject(users);
        } catch (IOException e) {
        }
    }
}
